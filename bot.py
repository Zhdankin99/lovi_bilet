import telebot
import requests
import logging
import random
import csv
from apscheduler.schedulers.background import BackgroundScheduler
from telebot import types

TOKEN = "8134292143:AAHXhREWyjJFwryTDP5FGNRy21snvo0OO0E"
API_KEY = "82958e4c34effa73ab76ecd5810a66d1"
PARTNER_ID = "606741"
AIRPORTS_CSV = r"C:\\Users\\–í–ª–∞–¥ –∏ –Æ–ª—è\\Desktop\\–ù–æ–≤–∞—è –ø–∞–ø–∫–∞\\Lovi_belet\\airports_list.csv"

bot = telebot.TeleBot(TOKEN)
scheduler = BackgroundScheduler()

user_subscriptions = {}
user_flights_history = {}
user_cities = {}
user_destinations = {}

iata_to_city = {}
city_to_iata = {}

def load_airports():
    try:
        with open(AIRPORTS_CSV, newline='', encoding='utf-8') as csvfile:
            reader = csv.reader(csvfile)
            next(reader)
            for row in reader:
                if len(row) < 2:
                    continue
                iata, city = row[0].strip(), row[1].strip()
                iata_to_city[iata] = city
                city_to_iata[city.lower()] = iata
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(iata_to_city)} –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –∏–∑ CSV.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {e}")

load_airports()

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("‚úà –ù–∞–π—Ç–∏ –±–∏–ª–µ—Ç—ã")
    btn2 = types.KeyboardButton("üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
    btn3 = types.KeyboardButton("üåç –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞")
    btn4 = types.KeyboardButton("üèô –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞")
    btn5 = types.KeyboardButton("‚Ñπ –û –±–æ—Ç–µ")
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup

def get_cheapest_flights(origin, destination=None):
    url = "https://api.travelpayouts.com/v2/prices/latest"
    headers = {"X-Access-Token": API_KEY}
    params = {
        "currency": "rub",
        "origin": origin,
        "limit": 30,
        "show_to_affiliates": "true",
        "partner": PARTNER_ID,
        "one_way": True,
        "sorting": "price",
        "max_stopovers": 0
    }
    if destination:
        params["destination"] = destination

    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()
        return sorted(data.get("data", []), key=lambda x: x['value'])
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ API: {e}")
        return []

def generate_booking_link(origin, destination, depart_date):
    depart_date_parts = depart_date.split('-')
    if len(depart_date_parts) == 3:
        formatted_date = f"{depart_date_parts[2]}{depart_date_parts[1]}"
        return f"https://www.aviasales.ru/search/{origin}{formatted_date}{destination}1"
    return "https://www.aviasales.ru/"

def send_flight_offer(user_id):
    origin = user_cities.get(user_id, "MOW")
    destination = user_destinations.get(user_id)
    flights = get_cheapest_flights(origin, destination)
    if not flights:
        bot.send_message(user_id, "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
        return

    user_history = user_flights_history.get(user_id, [])
    random.shuffle(flights)
    new_flights = []
    for flight in flights:
        flight_id = (flight['destination'], flight['depart_date'], flight['value'])
        if flight_id not in user_history:
            new_flights.append(flight)
            user_history.append(flight_id)
        if len(new_flights) >= 3:
            break

    if new_flights:
        message_text = "üî• –°–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã:\n\n"
        for flight in new_flights:
            price = flight.get('value', 'N/A')
            origin_code = flight.get('origin', 'N/A')
            destination = flight.get('destination', 'N/A')
            depart_date = flight.get('depart_date', 'N/A')
            origin_city = iata_to_city.get(origin_code, origin_code)
            destination_city = iata_to_city.get(destination, destination)
            booking_link = generate_booking_link(origin_code, destination, depart_date)

            message_text += (f"‚úà {origin_city} ‚Üí {destination_city}\n"
                             f"üí∞ {price} —Ä—É–±.\n"
                             f"üìÖ {depart_date}\n"
                             f"üîó [–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç]({booking_link})\n\n")

        user_flights_history[user_id] = user_history
        bot.send_message(user_id, message_text, parse_mode="Markdown", disable_web_page_preview=True)
    else:
        bot.send_message(user_id, "‚ùå –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

def send_daily_offers():
    for user_id in user_subscriptions.keys():
        send_flight_offer(user_id)

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–æ–≤–∏–ë–∏–ª–µ—Ç! ‚úàÔ∏è\n\n"
                                      "üöÄ –ù–∞—á–Ω—ë–º? –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                     reply_markup=main_menu())

@bot.message_handler(func=lambda message: True)
def handle_menu(message):
    if message.text == "‚úà –ù–∞–π—Ç–∏ –±–∏–ª–µ—Ç—ã":
        search_flight(message)
    elif message.text == "üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É":
        subscribe(message)
    elif message.text == "üåç –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞":
        change_city(message)
    elif message.text == "üèô –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞":
        change_destination(message)
    elif message.text == "‚Ñπ –û –±–æ—Ç–µ":
        bot.send_message(message.chat.id, "ü§ñ –Ø ‚Äî –õ–æ–≤–∏–ë–∏–ª–µ—Ç! –ù–∞—Ö–æ–∂—É –¥–ª—è —Ç–µ–±—è –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –∏–∑ –ú–æ—Å–∫–≤—ã. ‚úàÔ∏è")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu())

@bot.message_handler(commands=['subscribe'])
def subscribe(message):
    user_subscriptions[message.chat.id] = True
    bot.send_message(message.chat.id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–µ—à—ë–≤—ã—Ö –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤!")

@bot.message_handler(commands=['search'])
def search_flight(message):
    user_id = message.chat.id
    if user_id not in user_cities:
        bot.send_message(user_id, "üõ´ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞:")
        bot.register_next_step_handler(message, set_user_city)
    elif user_id not in user_destinations:
        bot.send_message(user_id, "üèô –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞:")
        bot.register_next_step_handler(message, set_user_destination)
    else:
        send_flight_offer(user_id)

@bot.message_handler(commands=['change_city'])
def change_city(message):
    bot.send_message(message.chat.id, "üîÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞:")
    bot.register_next_step_handler(message, set_user_city)

@bot.message_handler(commands=['change_destination'])
def change_destination(message):
    bot.send_message(message.chat.id, "üèô –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞:")
    bot.register_next_step_handler(message, set_user_destination)

def set_user_city(message):
    user_id = message.chat.id
    city_name = message.text.strip().lower()
    iata_code = city_to_iata.get(city_name)
    if iata_code:
        user_cities[user_id] = iata_code
        bot.send_message(user_id, f"‚úÖ –ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city_name.capitalize()}", reply_markup=main_menu())
        if user_id in user_destinations:
            send_flight_offer(user_id)
    else:
        bot.send_message(user_id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ú–æ—Å–∫–≤—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

def set_user_destination(message):
    user_id = message.chat.id
    city_name = message.text.strip().lower()
    iata_code = city_to_iata.get(city_name)
    if iata_code:
        user_destinations[user_id] = iata_code
        bot.send_message(user_id, f"‚úÖ –ì–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city_name.capitalize()}", reply_markup=main_menu())
        send_flight_offer(user_id)
    else:
        bot.send_message(user_id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")

scheduler.add_job(send_daily_offers, 'interval', hours=6)
scheduler.start()

bot.polling(none_stop=True)
